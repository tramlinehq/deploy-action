# action.yml
name: 'Configure Tramline'
description: 'Checkout the correct ref & parse JSON inputs'
branding:
  icon: 'arrow-down-circle'
  color: 'green'
inputs:
  input:
    description: "Input from Tramline as a JSON blob"
    required: true
    default: "{}"
outputs:
  version_code:
    description: 'the version code (build number) for the build'
    value: ${{ steps.tramline.outputs.version_code }}
  version_name:
    description: 'the version name for the build'
    value: ${{ steps.tramline.outputs.version_name }}
  commit_ref:
    description: 'the commit for which this workflow is triggered'
    value: ${{ steps.tramline.outputs.commit_ref }}
  build_notes:
    description: 'the testing notes for the build'
    value: ${{ steps.tramline.outputs.build_notes }}
runs:
  using: "composite"
  steps:
    - name: Parse inputs from Tramline
      run: |
        echo "Starting tramline input parsing..."

        # Check if jq is already installed
        if ! command -v jq &> /dev/null; then
            echo "jq is not installed. Installing..."

            # Determine the OS platform
            OS=$(uname -s)
            case $OS in
            "Linux")
                OS="linux64"
                ;;
            "Darwin")
                OS="osx-amd64"
                ;;
            *)
                echo "Error: Unsupported operating system."
                exit 1
                ;;
            esac

            # Download jq binary as a tarball
            wget -O jq.tar.gz "https://github.com/stedolan/jq/releases/download/jq-1.6/jq-${OS}"

            # Extract and install jq
            tar -xzf jq.tar.gz
            chmod +x jq
            sudo mv jq /usr/local/bin/
        else
            echo "jq is already installed. Skipping..."
        fi

        # Parse JSON and store keys in an array
        echo '${{ inputs.input }}' > tramline_input.json
        keys=()
        while read -r value
        do
            keys+=("$value")
        done < <(jq -c 'keys_unsorted[]' tramline_input.json)

        # Exit if there are parse errors
        if [ -z "$keys" ]; then
            echo "Error parsing Tramline inputs. Exiting..."
            exit 1
        fi

        # Loop through the keys and set variables
        for key in "${keys[@]}"; do
            # Get the value of the key from JSON
            value=$(jq -r ".$key" tramline_input.json)
            # Remove double quotes from key
            key="${key//\"/}"
            # Assign the value to a variable with a name based on the key
            output="${key}=${value}"
            # Output
            echo $output >> "$GITHUB_OUTPUT"
        done

        # Cleanup
        rm -f tramline_input.json
        rm -f jq.tar.gz
        echo "Finishing up tramline input parsing..."
      id: tramline
      shell: bash

    - name: Checkout the repo
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.tramline.outputs.commit_ref }}
